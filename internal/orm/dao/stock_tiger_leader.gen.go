// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/stock-task/internal/orm/model"
)

func newStockTigerLeader(db *gorm.DB, opts ...gen.DOOption) stockTigerLeader {
	_stockTigerLeader := stockTigerLeader{}

	_stockTigerLeader.stockTigerLeaderDo.UseDB(db, opts...)
	_stockTigerLeader.stockTigerLeaderDo.UseModel(&model.StockTigerLeader{})

	tableName := _stockTigerLeader.stockTigerLeaderDo.TableName()
	_stockTigerLeader.ALL = field.NewAsterisk(tableName)
	_stockTigerLeader.ID = field.NewInt64(tableName, "id")
	_stockTigerLeader.StockCode = field.NewString(tableName, "stock_code")
	_stockTigerLeader.StockName = field.NewString(tableName, "stock_name")
	_stockTigerLeader.CirculatingMarketValue = field.NewFloat64(tableName, "circulating_market_value")
	_stockTigerLeader.PlateType = field.NewInt64(tableName, "plate_type")
	_stockTigerLeader.VolumeRatio = field.NewFloat64(tableName, "volume_ratio")
	_stockTigerLeader.TurnoverRate = field.NewFloat64(tableName, "turnover_rate")
	_stockTigerLeader.IncreaseRate = field.NewFloat64(tableName, "increase_rate")
	_stockTigerLeader.Amplitude = field.NewFloat64(tableName, "amplitude")
	_stockTigerLeader.CurrentPrice = field.NewFloat64(tableName, "current_price")
	_stockTigerLeader.OpeningPrice = field.NewFloat64(tableName, "opening_price")
	_stockTigerLeader.HighestPrice = field.NewFloat64(tableName, "highest_price")
	_stockTigerLeader.LowestPrice = field.NewFloat64(tableName, "lowest_price")
	_stockTigerLeader.TradingDate = field.NewTime(tableName, "trading_date")
	_stockTigerLeader.IsOrg = field.NewInt64(tableName, "is_org")
	_stockTigerLeader.OrgTlabel = field.NewString(tableName, "org_tlabel")
	_stockTigerLeader.IsHotMoney = field.NewInt64(tableName, "is_hot_money")
	_stockTigerLeader.HotMoneyName = field.NewString(tableName, "hot_money_name")
	_stockTigerLeader.HotTlabel = field.NewString(tableName, "hot_tlabel")
	_stockTigerLeader.ContinuousLeaderTimes = field.NewInt64(tableName, "continuous_leader_times")
	_stockTigerLeader.Last1monthLeaderTimes = field.NewInt64(tableName, "last_1month_leader_times")
	_stockTigerLeader.Last3monthsLeaderTimes = field.NewInt64(tableName, "last_3months_leader_times")
	_stockTigerLeader.Last6monthsLeaderTimes = field.NewInt64(tableName, "last_6months_leader_times")
	_stockTigerLeader.AnnualLeaderTimes = field.NewInt64(tableName, "annual_leader_times")
	_stockTigerLeader.Industry = field.NewString(tableName, "industry")
	_stockTigerLeader.IndustryCode = field.NewString(tableName, "industry_code")
	_stockTigerLeader.UpdatedAt = field.NewTime(tableName, "updated_at")

	_stockTigerLeader.fillFieldMap()

	return _stockTigerLeader
}

// stockTigerLeader 股票列表-龙虎榜
type stockTigerLeader struct {
	stockTigerLeaderDo

	ALL                    field.Asterisk
	ID                     field.Int64   // 主键ID
	StockCode              field.String  // 股票代码
	StockName              field.String  // 股票名称
	CirculatingMarketValue field.Float64 // 流通市值
	PlateType              field.Int64   // 盘股类型(0-全部,1-微小盘,2-小盘,3-中盘,4-大盘)
	VolumeRatio            field.Float64 // 量比
	TurnoverRate           field.Float64 // 换手
	IncreaseRate           field.Float64 // 涨幅
	Amplitude              field.Float64 // 振幅
	CurrentPrice           field.Float64 // 现价
	OpeningPrice           field.Float64 // 开盘
	HighestPrice           field.Float64 // 最高
	LowestPrice            field.Float64 // 最低
	TradingDate            field.Time    // 上榜日期
	IsOrg                  field.Int64   // 机构榜(0-否 1-是)
	OrgTlabel              field.String  // 机构标签
	IsHotMoney             field.Int64   // 游资榜(0-否 1-是)
	HotMoneyName           field.String  // 游资名称
	HotTlabel              field.String  // 游资标签
	ContinuousLeaderTimes  field.Int64   // 连续上榜次数
	Last1monthLeaderTimes  field.Int64   // 近1个月上榜次数
	Last3monthsLeaderTimes field.Int64   // 近3个月上榜次数
	Last6monthsLeaderTimes field.Int64   // 近6个月上榜次数
	AnnualLeaderTimes      field.Int64   // 近一年上榜次数
	Industry               field.String  // 行业
	IndustryCode           field.String  // 行业代码
	UpdatedAt              field.Time    // 更新时间

	fieldMap map[string]field.Expr
}

func (s stockTigerLeader) Table(newTableName string) *stockTigerLeader {
	s.stockTigerLeaderDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stockTigerLeader) As(alias string) *stockTigerLeader {
	s.stockTigerLeaderDo.DO = *(s.stockTigerLeaderDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stockTigerLeader) updateTableName(table string) *stockTigerLeader {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.StockCode = field.NewString(table, "stock_code")
	s.StockName = field.NewString(table, "stock_name")
	s.CirculatingMarketValue = field.NewFloat64(table, "circulating_market_value")
	s.PlateType = field.NewInt64(table, "plate_type")
	s.VolumeRatio = field.NewFloat64(table, "volume_ratio")
	s.TurnoverRate = field.NewFloat64(table, "turnover_rate")
	s.IncreaseRate = field.NewFloat64(table, "increase_rate")
	s.Amplitude = field.NewFloat64(table, "amplitude")
	s.CurrentPrice = field.NewFloat64(table, "current_price")
	s.OpeningPrice = field.NewFloat64(table, "opening_price")
	s.HighestPrice = field.NewFloat64(table, "highest_price")
	s.LowestPrice = field.NewFloat64(table, "lowest_price")
	s.TradingDate = field.NewTime(table, "trading_date")
	s.IsOrg = field.NewInt64(table, "is_org")
	s.OrgTlabel = field.NewString(table, "org_tlabel")
	s.IsHotMoney = field.NewInt64(table, "is_hot_money")
	s.HotMoneyName = field.NewString(table, "hot_money_name")
	s.HotTlabel = field.NewString(table, "hot_tlabel")
	s.ContinuousLeaderTimes = field.NewInt64(table, "continuous_leader_times")
	s.Last1monthLeaderTimes = field.NewInt64(table, "last_1month_leader_times")
	s.Last3monthsLeaderTimes = field.NewInt64(table, "last_3months_leader_times")
	s.Last6monthsLeaderTimes = field.NewInt64(table, "last_6months_leader_times")
	s.AnnualLeaderTimes = field.NewInt64(table, "annual_leader_times")
	s.Industry = field.NewString(table, "industry")
	s.IndustryCode = field.NewString(table, "industry_code")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *stockTigerLeader) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stockTigerLeader) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 27)
	s.fieldMap["id"] = s.ID
	s.fieldMap["stock_code"] = s.StockCode
	s.fieldMap["stock_name"] = s.StockName
	s.fieldMap["circulating_market_value"] = s.CirculatingMarketValue
	s.fieldMap["plate_type"] = s.PlateType
	s.fieldMap["volume_ratio"] = s.VolumeRatio
	s.fieldMap["turnover_rate"] = s.TurnoverRate
	s.fieldMap["increase_rate"] = s.IncreaseRate
	s.fieldMap["amplitude"] = s.Amplitude
	s.fieldMap["current_price"] = s.CurrentPrice
	s.fieldMap["opening_price"] = s.OpeningPrice
	s.fieldMap["highest_price"] = s.HighestPrice
	s.fieldMap["lowest_price"] = s.LowestPrice
	s.fieldMap["trading_date"] = s.TradingDate
	s.fieldMap["is_org"] = s.IsOrg
	s.fieldMap["org_tlabel"] = s.OrgTlabel
	s.fieldMap["is_hot_money"] = s.IsHotMoney
	s.fieldMap["hot_money_name"] = s.HotMoneyName
	s.fieldMap["hot_tlabel"] = s.HotTlabel
	s.fieldMap["continuous_leader_times"] = s.ContinuousLeaderTimes
	s.fieldMap["last_1month_leader_times"] = s.Last1monthLeaderTimes
	s.fieldMap["last_3months_leader_times"] = s.Last3monthsLeaderTimes
	s.fieldMap["last_6months_leader_times"] = s.Last6monthsLeaderTimes
	s.fieldMap["annual_leader_times"] = s.AnnualLeaderTimes
	s.fieldMap["industry"] = s.Industry
	s.fieldMap["industry_code"] = s.IndustryCode
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s stockTigerLeader) clone(db *gorm.DB) stockTigerLeader {
	s.stockTigerLeaderDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stockTigerLeader) replaceDB(db *gorm.DB) stockTigerLeader {
	s.stockTigerLeaderDo.ReplaceDB(db)
	return s
}

type stockTigerLeaderDo struct{ gen.DO }

type IStockTigerLeaderDo interface {
	gen.SubQuery
	Debug() IStockTigerLeaderDo
	WithContext(ctx context.Context) IStockTigerLeaderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStockTigerLeaderDo
	WriteDB() IStockTigerLeaderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStockTigerLeaderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStockTigerLeaderDo
	Not(conds ...gen.Condition) IStockTigerLeaderDo
	Or(conds ...gen.Condition) IStockTigerLeaderDo
	Select(conds ...field.Expr) IStockTigerLeaderDo
	Where(conds ...gen.Condition) IStockTigerLeaderDo
	Order(conds ...field.Expr) IStockTigerLeaderDo
	Distinct(cols ...field.Expr) IStockTigerLeaderDo
	Omit(cols ...field.Expr) IStockTigerLeaderDo
	Join(table schema.Tabler, on ...field.Expr) IStockTigerLeaderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStockTigerLeaderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStockTigerLeaderDo
	Group(cols ...field.Expr) IStockTigerLeaderDo
	Having(conds ...gen.Condition) IStockTigerLeaderDo
	Limit(limit int) IStockTigerLeaderDo
	Offset(offset int) IStockTigerLeaderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStockTigerLeaderDo
	Unscoped() IStockTigerLeaderDo
	Create(values ...*model.StockTigerLeader) error
	CreateInBatches(values []*model.StockTigerLeader, batchSize int) error
	Save(values ...*model.StockTigerLeader) error
	First() (*model.StockTigerLeader, error)
	Take() (*model.StockTigerLeader, error)
	Last() (*model.StockTigerLeader, error)
	Find() ([]*model.StockTigerLeader, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockTigerLeader, err error)
	FindInBatches(result *[]*model.StockTigerLeader, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StockTigerLeader) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStockTigerLeaderDo
	Assign(attrs ...field.AssignExpr) IStockTigerLeaderDo
	Joins(fields ...field.RelationField) IStockTigerLeaderDo
	Preload(fields ...field.RelationField) IStockTigerLeaderDo
	FirstOrInit() (*model.StockTigerLeader, error)
	FirstOrCreate() (*model.StockTigerLeader, error)
	FindByPage(offset int, limit int) (result []*model.StockTigerLeader, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStockTigerLeaderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stockTigerLeaderDo) Debug() IStockTigerLeaderDo {
	return s.withDO(s.DO.Debug())
}

func (s stockTigerLeaderDo) WithContext(ctx context.Context) IStockTigerLeaderDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stockTigerLeaderDo) ReadDB() IStockTigerLeaderDo {
	return s.Clauses(dbresolver.Read)
}

func (s stockTigerLeaderDo) WriteDB() IStockTigerLeaderDo {
	return s.Clauses(dbresolver.Write)
}

func (s stockTigerLeaderDo) Session(config *gorm.Session) IStockTigerLeaderDo {
	return s.withDO(s.DO.Session(config))
}

func (s stockTigerLeaderDo) Clauses(conds ...clause.Expression) IStockTigerLeaderDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stockTigerLeaderDo) Returning(value interface{}, columns ...string) IStockTigerLeaderDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stockTigerLeaderDo) Not(conds ...gen.Condition) IStockTigerLeaderDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stockTigerLeaderDo) Or(conds ...gen.Condition) IStockTigerLeaderDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stockTigerLeaderDo) Select(conds ...field.Expr) IStockTigerLeaderDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stockTigerLeaderDo) Where(conds ...gen.Condition) IStockTigerLeaderDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stockTigerLeaderDo) Order(conds ...field.Expr) IStockTigerLeaderDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stockTigerLeaderDo) Distinct(cols ...field.Expr) IStockTigerLeaderDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stockTigerLeaderDo) Omit(cols ...field.Expr) IStockTigerLeaderDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stockTigerLeaderDo) Join(table schema.Tabler, on ...field.Expr) IStockTigerLeaderDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stockTigerLeaderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStockTigerLeaderDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stockTigerLeaderDo) RightJoin(table schema.Tabler, on ...field.Expr) IStockTigerLeaderDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stockTigerLeaderDo) Group(cols ...field.Expr) IStockTigerLeaderDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stockTigerLeaderDo) Having(conds ...gen.Condition) IStockTigerLeaderDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stockTigerLeaderDo) Limit(limit int) IStockTigerLeaderDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stockTigerLeaderDo) Offset(offset int) IStockTigerLeaderDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stockTigerLeaderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStockTigerLeaderDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stockTigerLeaderDo) Unscoped() IStockTigerLeaderDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stockTigerLeaderDo) Create(values ...*model.StockTigerLeader) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stockTigerLeaderDo) CreateInBatches(values []*model.StockTigerLeader, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stockTigerLeaderDo) Save(values ...*model.StockTigerLeader) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stockTigerLeaderDo) First() (*model.StockTigerLeader, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockTigerLeader), nil
	}
}

func (s stockTigerLeaderDo) Take() (*model.StockTigerLeader, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockTigerLeader), nil
	}
}

func (s stockTigerLeaderDo) Last() (*model.StockTigerLeader, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockTigerLeader), nil
	}
}

func (s stockTigerLeaderDo) Find() ([]*model.StockTigerLeader, error) {
	result, err := s.DO.Find()
	return result.([]*model.StockTigerLeader), err
}

func (s stockTigerLeaderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockTigerLeader, err error) {
	buf := make([]*model.StockTigerLeader, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stockTigerLeaderDo) FindInBatches(result *[]*model.StockTigerLeader, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stockTigerLeaderDo) Attrs(attrs ...field.AssignExpr) IStockTigerLeaderDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stockTigerLeaderDo) Assign(attrs ...field.AssignExpr) IStockTigerLeaderDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stockTigerLeaderDo) Joins(fields ...field.RelationField) IStockTigerLeaderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stockTigerLeaderDo) Preload(fields ...field.RelationField) IStockTigerLeaderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stockTigerLeaderDo) FirstOrInit() (*model.StockTigerLeader, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockTigerLeader), nil
	}
}

func (s stockTigerLeaderDo) FirstOrCreate() (*model.StockTigerLeader, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockTigerLeader), nil
	}
}

func (s stockTigerLeaderDo) FindByPage(offset int, limit int) (result []*model.StockTigerLeader, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stockTigerLeaderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stockTigerLeaderDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stockTigerLeaderDo) Delete(models ...*model.StockTigerLeader) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stockTigerLeaderDo) withDO(do gen.Dao) *stockTigerLeaderDo {
	s.DO = *do.(*gen.DO)
	return s
}
