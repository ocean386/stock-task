// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/stock-task/internal/orm/model"
)

func newStockStrong(db *gorm.DB, opts ...gen.DOOption) stockStrong {
	_stockStrong := stockStrong{}

	_stockStrong.stockStrongDo.UseDB(db, opts...)
	_stockStrong.stockStrongDo.UseModel(&model.StockStrong{})

	tableName := _stockStrong.stockStrongDo.TableName()
	_stockStrong.ALL = field.NewAsterisk(tableName)
	_stockStrong.StockCode = field.NewString(tableName, "stock_code")
	_stockStrong.StockName = field.NewString(tableName, "stock_name")
	_stockStrong.CirculatingMarketValue = field.NewFloat64(tableName, "circulating_market_value")
	_stockStrong.PlateType = field.NewInt64(tableName, "plate_type")
	_stockStrong.VolumeRatio = field.NewFloat64(tableName, "volume_ratio")
	_stockStrong.TurnoverRate = field.NewFloat64(tableName, "turnover_rate")
	_stockStrong.IncreaseRate = field.NewFloat64(tableName, "increase_rate")
	_stockStrong.CurrentPrice = field.NewFloat64(tableName, "current_price")
	_stockStrong.NewHigh = field.NewInt64(tableName, "new_high")
	_stockStrong.UpdownType = field.NewInt64(tableName, "updown_type")
	_stockStrong.SealingFund = field.NewFloat64(tableName, "sealing_fund")
	_stockStrong.FirstSealingTime = field.NewString(tableName, "first_sealing_time")
	_stockStrong.LastSealingTime = field.NewString(tableName, "last_sealing_time")
	_stockStrong.BreakingBoardTimes = field.NewInt64(tableName, "breaking_board_times")
	_stockStrong.UpdownDays = field.NewInt64(tableName, "updown_days")
	_stockStrong.UpdownTimes = field.NewInt64(tableName, "updown_times")
	_stockStrong.ConsecutiveLimitUpDays = field.NewInt64(tableName, "consecutive_limit_up_days")
	_stockStrong.SealingOrderTradingRatio = field.NewFloat64(tableName, "sealing_order_trading_ratio")
	_stockStrong.SealingOrderCirculatingRatio = field.NewFloat64(tableName, "sealing_order_circulating_ratio")
	_stockStrong.TradingDate = field.NewTime(tableName, "trading_date")
	_stockStrong.UpdatedAt = field.NewTime(tableName, "updated_at")

	_stockStrong.fillFieldMap()

	return _stockStrong
}

// stockStrong 每日强势榜
type stockStrong struct {
	stockStrongDo

	ALL                          field.Asterisk
	StockCode                    field.String  // 股票代码
	StockName                    field.String  // 股票名称
	CirculatingMarketValue       field.Float64 // 流通市值
	PlateType                    field.Int64   // 盘股类型(0-全部,1-微小盘,2-小盘,3-中盘,4-大盘)
	VolumeRatio                  field.Float64 // 量比
	TurnoverRate                 field.Float64 // 换手
	IncreaseRate                 field.Float64 // 涨幅
	CurrentPrice                 field.Float64 // 现价
	NewHigh                      field.Int64   // 是否新高(0-否 1-是)
	UpdownType                   field.Int64   // 涨跌类型(0-全部,1-涨停股,2-跌停股,3-炸板股,4-强势股)
	SealingFund                  field.Float64 // 封板资金
	FirstSealingTime             field.String  // 首次封板时间
	LastSealingTime              field.String  // 最后封板时间
	BreakingBoardTimes           field.Int64   // 炸板次数
	UpdownDays                   field.Int64   // 涨停统计-天数
	UpdownTimes                  field.Int64   // 涨停统计-次数
	ConsecutiveLimitUpDays       field.Int64   // 连板数
	SealingOrderTradingRatio     field.Float64 // 封单成交比
	SealingOrderCirculatingRatio field.Float64 // 封单流通比
	TradingDate                  field.Time    // 交易日期
	UpdatedAt                    field.Time    // 更新时间

	fieldMap map[string]field.Expr
}

func (s stockStrong) Table(newTableName string) *stockStrong {
	s.stockStrongDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stockStrong) As(alias string) *stockStrong {
	s.stockStrongDo.DO = *(s.stockStrongDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stockStrong) updateTableName(table string) *stockStrong {
	s.ALL = field.NewAsterisk(table)
	s.StockCode = field.NewString(table, "stock_code")
	s.StockName = field.NewString(table, "stock_name")
	s.CirculatingMarketValue = field.NewFloat64(table, "circulating_market_value")
	s.PlateType = field.NewInt64(table, "plate_type")
	s.VolumeRatio = field.NewFloat64(table, "volume_ratio")
	s.TurnoverRate = field.NewFloat64(table, "turnover_rate")
	s.IncreaseRate = field.NewFloat64(table, "increase_rate")
	s.CurrentPrice = field.NewFloat64(table, "current_price")
	s.NewHigh = field.NewInt64(table, "new_high")
	s.UpdownType = field.NewInt64(table, "updown_type")
	s.SealingFund = field.NewFloat64(table, "sealing_fund")
	s.FirstSealingTime = field.NewString(table, "first_sealing_time")
	s.LastSealingTime = field.NewString(table, "last_sealing_time")
	s.BreakingBoardTimes = field.NewInt64(table, "breaking_board_times")
	s.UpdownDays = field.NewInt64(table, "updown_days")
	s.UpdownTimes = field.NewInt64(table, "updown_times")
	s.ConsecutiveLimitUpDays = field.NewInt64(table, "consecutive_limit_up_days")
	s.SealingOrderTradingRatio = field.NewFloat64(table, "sealing_order_trading_ratio")
	s.SealingOrderCirculatingRatio = field.NewFloat64(table, "sealing_order_circulating_ratio")
	s.TradingDate = field.NewTime(table, "trading_date")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *stockStrong) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stockStrong) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 21)
	s.fieldMap["stock_code"] = s.StockCode
	s.fieldMap["stock_name"] = s.StockName
	s.fieldMap["circulating_market_value"] = s.CirculatingMarketValue
	s.fieldMap["plate_type"] = s.PlateType
	s.fieldMap["volume_ratio"] = s.VolumeRatio
	s.fieldMap["turnover_rate"] = s.TurnoverRate
	s.fieldMap["increase_rate"] = s.IncreaseRate
	s.fieldMap["current_price"] = s.CurrentPrice
	s.fieldMap["new_high"] = s.NewHigh
	s.fieldMap["updown_type"] = s.UpdownType
	s.fieldMap["sealing_fund"] = s.SealingFund
	s.fieldMap["first_sealing_time"] = s.FirstSealingTime
	s.fieldMap["last_sealing_time"] = s.LastSealingTime
	s.fieldMap["breaking_board_times"] = s.BreakingBoardTimes
	s.fieldMap["updown_days"] = s.UpdownDays
	s.fieldMap["updown_times"] = s.UpdownTimes
	s.fieldMap["consecutive_limit_up_days"] = s.ConsecutiveLimitUpDays
	s.fieldMap["sealing_order_trading_ratio"] = s.SealingOrderTradingRatio
	s.fieldMap["sealing_order_circulating_ratio"] = s.SealingOrderCirculatingRatio
	s.fieldMap["trading_date"] = s.TradingDate
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s stockStrong) clone(db *gorm.DB) stockStrong {
	s.stockStrongDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stockStrong) replaceDB(db *gorm.DB) stockStrong {
	s.stockStrongDo.ReplaceDB(db)
	return s
}

type stockStrongDo struct{ gen.DO }

type IStockStrongDo interface {
	gen.SubQuery
	Debug() IStockStrongDo
	WithContext(ctx context.Context) IStockStrongDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStockStrongDo
	WriteDB() IStockStrongDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStockStrongDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStockStrongDo
	Not(conds ...gen.Condition) IStockStrongDo
	Or(conds ...gen.Condition) IStockStrongDo
	Select(conds ...field.Expr) IStockStrongDo
	Where(conds ...gen.Condition) IStockStrongDo
	Order(conds ...field.Expr) IStockStrongDo
	Distinct(cols ...field.Expr) IStockStrongDo
	Omit(cols ...field.Expr) IStockStrongDo
	Join(table schema.Tabler, on ...field.Expr) IStockStrongDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStockStrongDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStockStrongDo
	Group(cols ...field.Expr) IStockStrongDo
	Having(conds ...gen.Condition) IStockStrongDo
	Limit(limit int) IStockStrongDo
	Offset(offset int) IStockStrongDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStockStrongDo
	Unscoped() IStockStrongDo
	Create(values ...*model.StockStrong) error
	CreateInBatches(values []*model.StockStrong, batchSize int) error
	Save(values ...*model.StockStrong) error
	First() (*model.StockStrong, error)
	Take() (*model.StockStrong, error)
	Last() (*model.StockStrong, error)
	Find() ([]*model.StockStrong, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockStrong, err error)
	FindInBatches(result *[]*model.StockStrong, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StockStrong) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStockStrongDo
	Assign(attrs ...field.AssignExpr) IStockStrongDo
	Joins(fields ...field.RelationField) IStockStrongDo
	Preload(fields ...field.RelationField) IStockStrongDo
	FirstOrInit() (*model.StockStrong, error)
	FirstOrCreate() (*model.StockStrong, error)
	FindByPage(offset int, limit int) (result []*model.StockStrong, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStockStrongDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stockStrongDo) Debug() IStockStrongDo {
	return s.withDO(s.DO.Debug())
}

func (s stockStrongDo) WithContext(ctx context.Context) IStockStrongDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stockStrongDo) ReadDB() IStockStrongDo {
	return s.Clauses(dbresolver.Read)
}

func (s stockStrongDo) WriteDB() IStockStrongDo {
	return s.Clauses(dbresolver.Write)
}

func (s stockStrongDo) Session(config *gorm.Session) IStockStrongDo {
	return s.withDO(s.DO.Session(config))
}

func (s stockStrongDo) Clauses(conds ...clause.Expression) IStockStrongDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stockStrongDo) Returning(value interface{}, columns ...string) IStockStrongDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stockStrongDo) Not(conds ...gen.Condition) IStockStrongDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stockStrongDo) Or(conds ...gen.Condition) IStockStrongDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stockStrongDo) Select(conds ...field.Expr) IStockStrongDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stockStrongDo) Where(conds ...gen.Condition) IStockStrongDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stockStrongDo) Order(conds ...field.Expr) IStockStrongDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stockStrongDo) Distinct(cols ...field.Expr) IStockStrongDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stockStrongDo) Omit(cols ...field.Expr) IStockStrongDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stockStrongDo) Join(table schema.Tabler, on ...field.Expr) IStockStrongDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stockStrongDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStockStrongDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stockStrongDo) RightJoin(table schema.Tabler, on ...field.Expr) IStockStrongDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stockStrongDo) Group(cols ...field.Expr) IStockStrongDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stockStrongDo) Having(conds ...gen.Condition) IStockStrongDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stockStrongDo) Limit(limit int) IStockStrongDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stockStrongDo) Offset(offset int) IStockStrongDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stockStrongDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStockStrongDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stockStrongDo) Unscoped() IStockStrongDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stockStrongDo) Create(values ...*model.StockStrong) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stockStrongDo) CreateInBatches(values []*model.StockStrong, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stockStrongDo) Save(values ...*model.StockStrong) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stockStrongDo) First() (*model.StockStrong, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockStrong), nil
	}
}

func (s stockStrongDo) Take() (*model.StockStrong, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockStrong), nil
	}
}

func (s stockStrongDo) Last() (*model.StockStrong, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockStrong), nil
	}
}

func (s stockStrongDo) Find() ([]*model.StockStrong, error) {
	result, err := s.DO.Find()
	return result.([]*model.StockStrong), err
}

func (s stockStrongDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockStrong, err error) {
	buf := make([]*model.StockStrong, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stockStrongDo) FindInBatches(result *[]*model.StockStrong, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stockStrongDo) Attrs(attrs ...field.AssignExpr) IStockStrongDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stockStrongDo) Assign(attrs ...field.AssignExpr) IStockStrongDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stockStrongDo) Joins(fields ...field.RelationField) IStockStrongDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stockStrongDo) Preload(fields ...field.RelationField) IStockStrongDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stockStrongDo) FirstOrInit() (*model.StockStrong, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockStrong), nil
	}
}

func (s stockStrongDo) FirstOrCreate() (*model.StockStrong, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockStrong), nil
	}
}

func (s stockStrongDo) FindByPage(offset int, limit int) (result []*model.StockStrong, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stockStrongDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stockStrongDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stockStrongDo) Delete(models ...*model.StockStrong) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stockStrongDo) withDO(do gen.Dao) *stockStrongDo {
	s.DO = *do.(*gen.DO)
	return s
}
