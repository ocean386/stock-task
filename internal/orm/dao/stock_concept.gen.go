// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/stock-task/internal/orm/model"
)

func newStockConcept(db *gorm.DB, opts ...gen.DOOption) stockConcept {
	_stockConcept := stockConcept{}

	_stockConcept.stockConceptDo.UseDB(db, opts...)
	_stockConcept.stockConceptDo.UseModel(&model.StockConcept{})

	tableName := _stockConcept.stockConceptDo.TableName()
	_stockConcept.ALL = field.NewAsterisk(tableName)
	_stockConcept.ID = field.NewInt64(tableName, "id")
	_stockConcept.ConceptCode = field.NewString(tableName, "concept_code")
	_stockConcept.ConceptName = field.NewString(tableName, "concept_name")
	_stockConcept.IsWatchConcept = field.NewInt64(tableName, "is_watch_concept")
	_stockConcept.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_stockConcept.CreatedAt = field.NewTime(tableName, "created_at")
	_stockConcept.UpdatedAt = field.NewTime(tableName, "updated_at")

	_stockConcept.fillFieldMap()

	return _stockConcept
}

// stockConcept 概念列表-A股
type stockConcept struct {
	stockConceptDo

	ALL            field.Asterisk
	ID             field.Int64  // 主键ID
	ConceptCode    field.String // 概念代码
	ConceptName    field.String // 概念名称
	IsWatchConcept field.Int64  // 自选概念标志(0-否 1-是)
	IsDeleted      field.Int64  // 删除标记(0-否 1-是)
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s stockConcept) Table(newTableName string) *stockConcept {
	s.stockConceptDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stockConcept) As(alias string) *stockConcept {
	s.stockConceptDo.DO = *(s.stockConceptDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stockConcept) updateTableName(table string) *stockConcept {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ConceptCode = field.NewString(table, "concept_code")
	s.ConceptName = field.NewString(table, "concept_name")
	s.IsWatchConcept = field.NewInt64(table, "is_watch_concept")
	s.IsDeleted = field.NewInt64(table, "is_deleted")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *stockConcept) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stockConcept) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["concept_code"] = s.ConceptCode
	s.fieldMap["concept_name"] = s.ConceptName
	s.fieldMap["is_watch_concept"] = s.IsWatchConcept
	s.fieldMap["is_deleted"] = s.IsDeleted
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s stockConcept) clone(db *gorm.DB) stockConcept {
	s.stockConceptDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stockConcept) replaceDB(db *gorm.DB) stockConcept {
	s.stockConceptDo.ReplaceDB(db)
	return s
}

type stockConceptDo struct{ gen.DO }

type IStockConceptDo interface {
	gen.SubQuery
	Debug() IStockConceptDo
	WithContext(ctx context.Context) IStockConceptDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStockConceptDo
	WriteDB() IStockConceptDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStockConceptDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStockConceptDo
	Not(conds ...gen.Condition) IStockConceptDo
	Or(conds ...gen.Condition) IStockConceptDo
	Select(conds ...field.Expr) IStockConceptDo
	Where(conds ...gen.Condition) IStockConceptDo
	Order(conds ...field.Expr) IStockConceptDo
	Distinct(cols ...field.Expr) IStockConceptDo
	Omit(cols ...field.Expr) IStockConceptDo
	Join(table schema.Tabler, on ...field.Expr) IStockConceptDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStockConceptDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStockConceptDo
	Group(cols ...field.Expr) IStockConceptDo
	Having(conds ...gen.Condition) IStockConceptDo
	Limit(limit int) IStockConceptDo
	Offset(offset int) IStockConceptDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStockConceptDo
	Unscoped() IStockConceptDo
	Create(values ...*model.StockConcept) error
	CreateInBatches(values []*model.StockConcept, batchSize int) error
	Save(values ...*model.StockConcept) error
	First() (*model.StockConcept, error)
	Take() (*model.StockConcept, error)
	Last() (*model.StockConcept, error)
	Find() ([]*model.StockConcept, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockConcept, err error)
	FindInBatches(result *[]*model.StockConcept, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StockConcept) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStockConceptDo
	Assign(attrs ...field.AssignExpr) IStockConceptDo
	Joins(fields ...field.RelationField) IStockConceptDo
	Preload(fields ...field.RelationField) IStockConceptDo
	FirstOrInit() (*model.StockConcept, error)
	FirstOrCreate() (*model.StockConcept, error)
	FindByPage(offset int, limit int) (result []*model.StockConcept, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStockConceptDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stockConceptDo) Debug() IStockConceptDo {
	return s.withDO(s.DO.Debug())
}

func (s stockConceptDo) WithContext(ctx context.Context) IStockConceptDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stockConceptDo) ReadDB() IStockConceptDo {
	return s.Clauses(dbresolver.Read)
}

func (s stockConceptDo) WriteDB() IStockConceptDo {
	return s.Clauses(dbresolver.Write)
}

func (s stockConceptDo) Session(config *gorm.Session) IStockConceptDo {
	return s.withDO(s.DO.Session(config))
}

func (s stockConceptDo) Clauses(conds ...clause.Expression) IStockConceptDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stockConceptDo) Returning(value interface{}, columns ...string) IStockConceptDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stockConceptDo) Not(conds ...gen.Condition) IStockConceptDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stockConceptDo) Or(conds ...gen.Condition) IStockConceptDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stockConceptDo) Select(conds ...field.Expr) IStockConceptDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stockConceptDo) Where(conds ...gen.Condition) IStockConceptDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stockConceptDo) Order(conds ...field.Expr) IStockConceptDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stockConceptDo) Distinct(cols ...field.Expr) IStockConceptDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stockConceptDo) Omit(cols ...field.Expr) IStockConceptDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stockConceptDo) Join(table schema.Tabler, on ...field.Expr) IStockConceptDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stockConceptDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStockConceptDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stockConceptDo) RightJoin(table schema.Tabler, on ...field.Expr) IStockConceptDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stockConceptDo) Group(cols ...field.Expr) IStockConceptDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stockConceptDo) Having(conds ...gen.Condition) IStockConceptDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stockConceptDo) Limit(limit int) IStockConceptDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stockConceptDo) Offset(offset int) IStockConceptDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stockConceptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStockConceptDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stockConceptDo) Unscoped() IStockConceptDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stockConceptDo) Create(values ...*model.StockConcept) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stockConceptDo) CreateInBatches(values []*model.StockConcept, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stockConceptDo) Save(values ...*model.StockConcept) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stockConceptDo) First() (*model.StockConcept, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockConcept), nil
	}
}

func (s stockConceptDo) Take() (*model.StockConcept, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockConcept), nil
	}
}

func (s stockConceptDo) Last() (*model.StockConcept, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockConcept), nil
	}
}

func (s stockConceptDo) Find() ([]*model.StockConcept, error) {
	result, err := s.DO.Find()
	return result.([]*model.StockConcept), err
}

func (s stockConceptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockConcept, err error) {
	buf := make([]*model.StockConcept, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stockConceptDo) FindInBatches(result *[]*model.StockConcept, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stockConceptDo) Attrs(attrs ...field.AssignExpr) IStockConceptDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stockConceptDo) Assign(attrs ...field.AssignExpr) IStockConceptDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stockConceptDo) Joins(fields ...field.RelationField) IStockConceptDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stockConceptDo) Preload(fields ...field.RelationField) IStockConceptDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stockConceptDo) FirstOrInit() (*model.StockConcept, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockConcept), nil
	}
}

func (s stockConceptDo) FirstOrCreate() (*model.StockConcept, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockConcept), nil
	}
}

func (s stockConceptDo) FindByPage(offset int, limit int) (result []*model.StockConcept, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stockConceptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stockConceptDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stockConceptDo) Delete(models ...*model.StockConcept) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stockConceptDo) withDO(do gen.Dao) *stockConceptDo {
	s.DO = *do.(*gen.DO)
	return s
}
