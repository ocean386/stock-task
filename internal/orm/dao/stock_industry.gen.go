// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/stock-task/internal/orm/model"
)

func newStockIndustry(db *gorm.DB, opts ...gen.DOOption) stockIndustry {
	_stockIndustry := stockIndustry{}

	_stockIndustry.stockIndustryDo.UseDB(db, opts...)
	_stockIndustry.stockIndustryDo.UseModel(&model.StockIndustry{})

	tableName := _stockIndustry.stockIndustryDo.TableName()
	_stockIndustry.ALL = field.NewAsterisk(tableName)
	_stockIndustry.ID = field.NewInt64(tableName, "id")
	_stockIndustry.IndustryName = field.NewString(tableName, "industry_name")
	_stockIndustry.IndustryCode = field.NewString(tableName, "industry_code")
	_stockIndustry.IsWatchIndustry = field.NewInt64(tableName, "is_watch_industry")
	_stockIndustry.CreatedAt = field.NewTime(tableName, "created_at")
	_stockIndustry.UpdatedAt = field.NewTime(tableName, "updated_at")

	_stockIndustry.fillFieldMap()

	return _stockIndustry
}

// stockIndustry 行业列表-A股
type stockIndustry struct {
	stockIndustryDo

	ALL             field.Asterisk
	ID              field.Int64  // 主键ID
	IndustryName    field.String // 行业名称
	IndustryCode    field.String // 行业代码
	IsWatchIndustry field.Int64  // 自选行业标志(0-否 1-是)
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s stockIndustry) Table(newTableName string) *stockIndustry {
	s.stockIndustryDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stockIndustry) As(alias string) *stockIndustry {
	s.stockIndustryDo.DO = *(s.stockIndustryDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stockIndustry) updateTableName(table string) *stockIndustry {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.IndustryName = field.NewString(table, "industry_name")
	s.IndustryCode = field.NewString(table, "industry_code")
	s.IsWatchIndustry = field.NewInt64(table, "is_watch_industry")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *stockIndustry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stockIndustry) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["industry_name"] = s.IndustryName
	s.fieldMap["industry_code"] = s.IndustryCode
	s.fieldMap["is_watch_industry"] = s.IsWatchIndustry
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s stockIndustry) clone(db *gorm.DB) stockIndustry {
	s.stockIndustryDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stockIndustry) replaceDB(db *gorm.DB) stockIndustry {
	s.stockIndustryDo.ReplaceDB(db)
	return s
}

type stockIndustryDo struct{ gen.DO }

type IStockIndustryDo interface {
	gen.SubQuery
	Debug() IStockIndustryDo
	WithContext(ctx context.Context) IStockIndustryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStockIndustryDo
	WriteDB() IStockIndustryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStockIndustryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStockIndustryDo
	Not(conds ...gen.Condition) IStockIndustryDo
	Or(conds ...gen.Condition) IStockIndustryDo
	Select(conds ...field.Expr) IStockIndustryDo
	Where(conds ...gen.Condition) IStockIndustryDo
	Order(conds ...field.Expr) IStockIndustryDo
	Distinct(cols ...field.Expr) IStockIndustryDo
	Omit(cols ...field.Expr) IStockIndustryDo
	Join(table schema.Tabler, on ...field.Expr) IStockIndustryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStockIndustryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStockIndustryDo
	Group(cols ...field.Expr) IStockIndustryDo
	Having(conds ...gen.Condition) IStockIndustryDo
	Limit(limit int) IStockIndustryDo
	Offset(offset int) IStockIndustryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStockIndustryDo
	Unscoped() IStockIndustryDo
	Create(values ...*model.StockIndustry) error
	CreateInBatches(values []*model.StockIndustry, batchSize int) error
	Save(values ...*model.StockIndustry) error
	First() (*model.StockIndustry, error)
	Take() (*model.StockIndustry, error)
	Last() (*model.StockIndustry, error)
	Find() ([]*model.StockIndustry, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockIndustry, err error)
	FindInBatches(result *[]*model.StockIndustry, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StockIndustry) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStockIndustryDo
	Assign(attrs ...field.AssignExpr) IStockIndustryDo
	Joins(fields ...field.RelationField) IStockIndustryDo
	Preload(fields ...field.RelationField) IStockIndustryDo
	FirstOrInit() (*model.StockIndustry, error)
	FirstOrCreate() (*model.StockIndustry, error)
	FindByPage(offset int, limit int) (result []*model.StockIndustry, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStockIndustryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stockIndustryDo) Debug() IStockIndustryDo {
	return s.withDO(s.DO.Debug())
}

func (s stockIndustryDo) WithContext(ctx context.Context) IStockIndustryDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stockIndustryDo) ReadDB() IStockIndustryDo {
	return s.Clauses(dbresolver.Read)
}

func (s stockIndustryDo) WriteDB() IStockIndustryDo {
	return s.Clauses(dbresolver.Write)
}

func (s stockIndustryDo) Session(config *gorm.Session) IStockIndustryDo {
	return s.withDO(s.DO.Session(config))
}

func (s stockIndustryDo) Clauses(conds ...clause.Expression) IStockIndustryDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stockIndustryDo) Returning(value interface{}, columns ...string) IStockIndustryDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stockIndustryDo) Not(conds ...gen.Condition) IStockIndustryDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stockIndustryDo) Or(conds ...gen.Condition) IStockIndustryDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stockIndustryDo) Select(conds ...field.Expr) IStockIndustryDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stockIndustryDo) Where(conds ...gen.Condition) IStockIndustryDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stockIndustryDo) Order(conds ...field.Expr) IStockIndustryDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stockIndustryDo) Distinct(cols ...field.Expr) IStockIndustryDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stockIndustryDo) Omit(cols ...field.Expr) IStockIndustryDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stockIndustryDo) Join(table schema.Tabler, on ...field.Expr) IStockIndustryDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stockIndustryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStockIndustryDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stockIndustryDo) RightJoin(table schema.Tabler, on ...field.Expr) IStockIndustryDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stockIndustryDo) Group(cols ...field.Expr) IStockIndustryDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stockIndustryDo) Having(conds ...gen.Condition) IStockIndustryDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stockIndustryDo) Limit(limit int) IStockIndustryDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stockIndustryDo) Offset(offset int) IStockIndustryDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stockIndustryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStockIndustryDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stockIndustryDo) Unscoped() IStockIndustryDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stockIndustryDo) Create(values ...*model.StockIndustry) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stockIndustryDo) CreateInBatches(values []*model.StockIndustry, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stockIndustryDo) Save(values ...*model.StockIndustry) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stockIndustryDo) First() (*model.StockIndustry, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockIndustry), nil
	}
}

func (s stockIndustryDo) Take() (*model.StockIndustry, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockIndustry), nil
	}
}

func (s stockIndustryDo) Last() (*model.StockIndustry, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockIndustry), nil
	}
}

func (s stockIndustryDo) Find() ([]*model.StockIndustry, error) {
	result, err := s.DO.Find()
	return result.([]*model.StockIndustry), err
}

func (s stockIndustryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockIndustry, err error) {
	buf := make([]*model.StockIndustry, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stockIndustryDo) FindInBatches(result *[]*model.StockIndustry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stockIndustryDo) Attrs(attrs ...field.AssignExpr) IStockIndustryDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stockIndustryDo) Assign(attrs ...field.AssignExpr) IStockIndustryDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stockIndustryDo) Joins(fields ...field.RelationField) IStockIndustryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stockIndustryDo) Preload(fields ...field.RelationField) IStockIndustryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stockIndustryDo) FirstOrInit() (*model.StockIndustry, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockIndustry), nil
	}
}

func (s stockIndustryDo) FirstOrCreate() (*model.StockIndustry, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockIndustry), nil
	}
}

func (s stockIndustryDo) FindByPage(offset int, limit int) (result []*model.StockIndustry, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stockIndustryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stockIndustryDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stockIndustryDo) Delete(models ...*model.StockIndustry) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stockIndustryDo) withDO(do gen.Dao) *stockIndustryDo {
	s.DO = *do.(*gen.DO)
	return s
}
