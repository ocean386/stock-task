// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/stock-task/internal/orm/model"
)

func newStockOrderChange(db *gorm.DB, opts ...gen.DOOption) stockOrderChange {
	_stockOrderChange := stockOrderChange{}

	_stockOrderChange.stockOrderChangeDo.UseDB(db, opts...)
	_stockOrderChange.stockOrderChangeDo.UseModel(&model.StockOrderChange{})

	tableName := _stockOrderChange.stockOrderChangeDo.TableName()
	_stockOrderChange.ALL = field.NewAsterisk(tableName)
	_stockOrderChange.StockCode = field.NewString(tableName, "stock_code")
	_stockOrderChange.StockName = field.NewString(tableName, "stock_name")
	_stockOrderChange.PlateType = field.NewInt64(tableName, "plate_type")
	_stockOrderChange.ChangeTimes = field.NewInt64(tableName, "change_times")
	_stockOrderChange.ChangeMsg = field.NewString(tableName, "change_msg")
	_stockOrderChange.VolumeRatio = field.NewFloat64(tableName, "volume_ratio")
	_stockOrderChange.TurnoverRate = field.NewFloat64(tableName, "turnover_rate")
	_stockOrderChange.IncreaseRate = field.NewFloat64(tableName, "increase_rate")
	_stockOrderChange.CurrentPrice = field.NewFloat64(tableName, "current_price")
	_stockOrderChange.TradingDate = field.NewTime(tableName, "trading_date")
	_stockOrderChange.Industry = field.NewString(tableName, "industry")
	_stockOrderChange.IndustryCode = field.NewString(tableName, "industry_code")
	_stockOrderChange.UpdatedAt = field.NewTime(tableName, "updated_at")

	_stockOrderChange.fillFieldMap()

	return _stockOrderChange
}

// stockOrderChange 盘口异动
type stockOrderChange struct {
	stockOrderChangeDo

	ALL          field.Asterisk
	StockCode    field.String  // 股票代码
	StockName    field.String  // 股票名称
	PlateType    field.Int64   // 盘股类型(0-全部,1-微小盘,2-小盘,3-中盘,4-大盘)
	ChangeTimes  field.Int64   // 异动次数
	ChangeMsg    field.String  // 异动消息
	VolumeRatio  field.Float64 // 量比
	TurnoverRate field.Float64 // 换手
	IncreaseRate field.Float64 // 涨幅
	CurrentPrice field.Float64 // 现价
	TradingDate  field.Time    // 交易日期
	Industry     field.String  // 行业
	IndustryCode field.String  // 行业代码
	UpdatedAt    field.Time    // 更新时间

	fieldMap map[string]field.Expr
}

func (s stockOrderChange) Table(newTableName string) *stockOrderChange {
	s.stockOrderChangeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stockOrderChange) As(alias string) *stockOrderChange {
	s.stockOrderChangeDo.DO = *(s.stockOrderChangeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stockOrderChange) updateTableName(table string) *stockOrderChange {
	s.ALL = field.NewAsterisk(table)
	s.StockCode = field.NewString(table, "stock_code")
	s.StockName = field.NewString(table, "stock_name")
	s.PlateType = field.NewInt64(table, "plate_type")
	s.ChangeTimes = field.NewInt64(table, "change_times")
	s.ChangeMsg = field.NewString(table, "change_msg")
	s.VolumeRatio = field.NewFloat64(table, "volume_ratio")
	s.TurnoverRate = field.NewFloat64(table, "turnover_rate")
	s.IncreaseRate = field.NewFloat64(table, "increase_rate")
	s.CurrentPrice = field.NewFloat64(table, "current_price")
	s.TradingDate = field.NewTime(table, "trading_date")
	s.Industry = field.NewString(table, "industry")
	s.IndustryCode = field.NewString(table, "industry_code")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *stockOrderChange) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stockOrderChange) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["stock_code"] = s.StockCode
	s.fieldMap["stock_name"] = s.StockName
	s.fieldMap["plate_type"] = s.PlateType
	s.fieldMap["change_times"] = s.ChangeTimes
	s.fieldMap["change_msg"] = s.ChangeMsg
	s.fieldMap["volume_ratio"] = s.VolumeRatio
	s.fieldMap["turnover_rate"] = s.TurnoverRate
	s.fieldMap["increase_rate"] = s.IncreaseRate
	s.fieldMap["current_price"] = s.CurrentPrice
	s.fieldMap["trading_date"] = s.TradingDate
	s.fieldMap["industry"] = s.Industry
	s.fieldMap["industry_code"] = s.IndustryCode
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s stockOrderChange) clone(db *gorm.DB) stockOrderChange {
	s.stockOrderChangeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stockOrderChange) replaceDB(db *gorm.DB) stockOrderChange {
	s.stockOrderChangeDo.ReplaceDB(db)
	return s
}

type stockOrderChangeDo struct{ gen.DO }

type IStockOrderChangeDo interface {
	gen.SubQuery
	Debug() IStockOrderChangeDo
	WithContext(ctx context.Context) IStockOrderChangeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStockOrderChangeDo
	WriteDB() IStockOrderChangeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStockOrderChangeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStockOrderChangeDo
	Not(conds ...gen.Condition) IStockOrderChangeDo
	Or(conds ...gen.Condition) IStockOrderChangeDo
	Select(conds ...field.Expr) IStockOrderChangeDo
	Where(conds ...gen.Condition) IStockOrderChangeDo
	Order(conds ...field.Expr) IStockOrderChangeDo
	Distinct(cols ...field.Expr) IStockOrderChangeDo
	Omit(cols ...field.Expr) IStockOrderChangeDo
	Join(table schema.Tabler, on ...field.Expr) IStockOrderChangeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStockOrderChangeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStockOrderChangeDo
	Group(cols ...field.Expr) IStockOrderChangeDo
	Having(conds ...gen.Condition) IStockOrderChangeDo
	Limit(limit int) IStockOrderChangeDo
	Offset(offset int) IStockOrderChangeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStockOrderChangeDo
	Unscoped() IStockOrderChangeDo
	Create(values ...*model.StockOrderChange) error
	CreateInBatches(values []*model.StockOrderChange, batchSize int) error
	Save(values ...*model.StockOrderChange) error
	First() (*model.StockOrderChange, error)
	Take() (*model.StockOrderChange, error)
	Last() (*model.StockOrderChange, error)
	Find() ([]*model.StockOrderChange, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockOrderChange, err error)
	FindInBatches(result *[]*model.StockOrderChange, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StockOrderChange) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStockOrderChangeDo
	Assign(attrs ...field.AssignExpr) IStockOrderChangeDo
	Joins(fields ...field.RelationField) IStockOrderChangeDo
	Preload(fields ...field.RelationField) IStockOrderChangeDo
	FirstOrInit() (*model.StockOrderChange, error)
	FirstOrCreate() (*model.StockOrderChange, error)
	FindByPage(offset int, limit int) (result []*model.StockOrderChange, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStockOrderChangeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stockOrderChangeDo) Debug() IStockOrderChangeDo {
	return s.withDO(s.DO.Debug())
}

func (s stockOrderChangeDo) WithContext(ctx context.Context) IStockOrderChangeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stockOrderChangeDo) ReadDB() IStockOrderChangeDo {
	return s.Clauses(dbresolver.Read)
}

func (s stockOrderChangeDo) WriteDB() IStockOrderChangeDo {
	return s.Clauses(dbresolver.Write)
}

func (s stockOrderChangeDo) Session(config *gorm.Session) IStockOrderChangeDo {
	return s.withDO(s.DO.Session(config))
}

func (s stockOrderChangeDo) Clauses(conds ...clause.Expression) IStockOrderChangeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stockOrderChangeDo) Returning(value interface{}, columns ...string) IStockOrderChangeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stockOrderChangeDo) Not(conds ...gen.Condition) IStockOrderChangeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stockOrderChangeDo) Or(conds ...gen.Condition) IStockOrderChangeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stockOrderChangeDo) Select(conds ...field.Expr) IStockOrderChangeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stockOrderChangeDo) Where(conds ...gen.Condition) IStockOrderChangeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stockOrderChangeDo) Order(conds ...field.Expr) IStockOrderChangeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stockOrderChangeDo) Distinct(cols ...field.Expr) IStockOrderChangeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stockOrderChangeDo) Omit(cols ...field.Expr) IStockOrderChangeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stockOrderChangeDo) Join(table schema.Tabler, on ...field.Expr) IStockOrderChangeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stockOrderChangeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStockOrderChangeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stockOrderChangeDo) RightJoin(table schema.Tabler, on ...field.Expr) IStockOrderChangeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stockOrderChangeDo) Group(cols ...field.Expr) IStockOrderChangeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stockOrderChangeDo) Having(conds ...gen.Condition) IStockOrderChangeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stockOrderChangeDo) Limit(limit int) IStockOrderChangeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stockOrderChangeDo) Offset(offset int) IStockOrderChangeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stockOrderChangeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStockOrderChangeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stockOrderChangeDo) Unscoped() IStockOrderChangeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stockOrderChangeDo) Create(values ...*model.StockOrderChange) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stockOrderChangeDo) CreateInBatches(values []*model.StockOrderChange, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stockOrderChangeDo) Save(values ...*model.StockOrderChange) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stockOrderChangeDo) First() (*model.StockOrderChange, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockOrderChange), nil
	}
}

func (s stockOrderChangeDo) Take() (*model.StockOrderChange, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockOrderChange), nil
	}
}

func (s stockOrderChangeDo) Last() (*model.StockOrderChange, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockOrderChange), nil
	}
}

func (s stockOrderChangeDo) Find() ([]*model.StockOrderChange, error) {
	result, err := s.DO.Find()
	return result.([]*model.StockOrderChange), err
}

func (s stockOrderChangeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockOrderChange, err error) {
	buf := make([]*model.StockOrderChange, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stockOrderChangeDo) FindInBatches(result *[]*model.StockOrderChange, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stockOrderChangeDo) Attrs(attrs ...field.AssignExpr) IStockOrderChangeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stockOrderChangeDo) Assign(attrs ...field.AssignExpr) IStockOrderChangeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stockOrderChangeDo) Joins(fields ...field.RelationField) IStockOrderChangeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stockOrderChangeDo) Preload(fields ...field.RelationField) IStockOrderChangeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stockOrderChangeDo) FirstOrInit() (*model.StockOrderChange, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockOrderChange), nil
	}
}

func (s stockOrderChangeDo) FirstOrCreate() (*model.StockOrderChange, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockOrderChange), nil
	}
}

func (s stockOrderChangeDo) FindByPage(offset int, limit int) (result []*model.StockOrderChange, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stockOrderChangeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stockOrderChangeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stockOrderChangeDo) Delete(models ...*model.StockOrderChange) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stockOrderChangeDo) withDO(do gen.Dao) *stockOrderChangeDo {
	s.DO = *do.(*gen.DO)
	return s
}
