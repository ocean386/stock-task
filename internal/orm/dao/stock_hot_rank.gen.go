// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/stock-task/internal/orm/model"
)

func newStockHotRank(db *gorm.DB, opts ...gen.DOOption) stockHotRank {
	_stockHotRank := stockHotRank{}

	_stockHotRank.stockHotRankDo.UseDB(db, opts...)
	_stockHotRank.stockHotRankDo.UseModel(&model.StockHotRank{})

	tableName := _stockHotRank.stockHotRankDo.TableName()
	_stockHotRank.ALL = field.NewAsterisk(tableName)
	_stockHotRank.StockCode = field.NewString(tableName, "stock_code")
	_stockHotRank.StockName = field.NewString(tableName, "stock_name")
	_stockHotRank.PlateType = field.NewInt64(tableName, "plate_type")
	_stockHotRank.HotSortID = field.NewInt64(tableName, "hot_sort_id")
	_stockHotRank.YesterdaySortID = field.NewInt64(tableName, "yesterday_sort_id")
	_stockHotRank.VolumeRatio = field.NewFloat64(tableName, "volume_ratio")
	_stockHotRank.TurnoverRate = field.NewFloat64(tableName, "turnover_rate")
	_stockHotRank.IncreaseRate = field.NewFloat64(tableName, "increase_rate")
	_stockHotRank.CurrentPrice = field.NewFloat64(tableName, "current_price")
	_stockHotRank.TradingDate = field.NewTime(tableName, "trading_date")
	_stockHotRank.Industry = field.NewString(tableName, "industry")
	_stockHotRank.IndustryCode = field.NewString(tableName, "industry_code")
	_stockHotRank.UpdatedAt = field.NewTime(tableName, "updated_at")

	_stockHotRank.fillFieldMap()

	return _stockHotRank
}

// stockHotRank 人气榜-100名
type stockHotRank struct {
	stockHotRankDo

	ALL             field.Asterisk
	StockCode       field.String  // 股票代码
	StockName       field.String  // 股票名称
	PlateType       field.Int64   // 盘股类型(0-全部,1-微小盘,2-小盘,3-中盘,4-大盘)
	HotSortID       field.Int64   // 排名ID
	YesterdaySortID field.Int64   // 昨日排名ID
	VolumeRatio     field.Float64 // 量比
	TurnoverRate    field.Float64 // 换手
	IncreaseRate    field.Float64 // 涨幅
	CurrentPrice    field.Float64 // 现价
	TradingDate     field.Time    // 交易日期
	Industry        field.String  // 行业
	IndustryCode    field.String  // 行业代码
	UpdatedAt       field.Time    // 更新时间

	fieldMap map[string]field.Expr
}

func (s stockHotRank) Table(newTableName string) *stockHotRank {
	s.stockHotRankDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stockHotRank) As(alias string) *stockHotRank {
	s.stockHotRankDo.DO = *(s.stockHotRankDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stockHotRank) updateTableName(table string) *stockHotRank {
	s.ALL = field.NewAsterisk(table)
	s.StockCode = field.NewString(table, "stock_code")
	s.StockName = field.NewString(table, "stock_name")
	s.PlateType = field.NewInt64(table, "plate_type")
	s.HotSortID = field.NewInt64(table, "hot_sort_id")
	s.YesterdaySortID = field.NewInt64(table, "yesterday_sort_id")
	s.VolumeRatio = field.NewFloat64(table, "volume_ratio")
	s.TurnoverRate = field.NewFloat64(table, "turnover_rate")
	s.IncreaseRate = field.NewFloat64(table, "increase_rate")
	s.CurrentPrice = field.NewFloat64(table, "current_price")
	s.TradingDate = field.NewTime(table, "trading_date")
	s.Industry = field.NewString(table, "industry")
	s.IndustryCode = field.NewString(table, "industry_code")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *stockHotRank) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stockHotRank) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["stock_code"] = s.StockCode
	s.fieldMap["stock_name"] = s.StockName
	s.fieldMap["plate_type"] = s.PlateType
	s.fieldMap["hot_sort_id"] = s.HotSortID
	s.fieldMap["yesterday_sort_id"] = s.YesterdaySortID
	s.fieldMap["volume_ratio"] = s.VolumeRatio
	s.fieldMap["turnover_rate"] = s.TurnoverRate
	s.fieldMap["increase_rate"] = s.IncreaseRate
	s.fieldMap["current_price"] = s.CurrentPrice
	s.fieldMap["trading_date"] = s.TradingDate
	s.fieldMap["industry"] = s.Industry
	s.fieldMap["industry_code"] = s.IndustryCode
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s stockHotRank) clone(db *gorm.DB) stockHotRank {
	s.stockHotRankDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stockHotRank) replaceDB(db *gorm.DB) stockHotRank {
	s.stockHotRankDo.ReplaceDB(db)
	return s
}

type stockHotRankDo struct{ gen.DO }

type IStockHotRankDo interface {
	gen.SubQuery
	Debug() IStockHotRankDo
	WithContext(ctx context.Context) IStockHotRankDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStockHotRankDo
	WriteDB() IStockHotRankDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStockHotRankDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStockHotRankDo
	Not(conds ...gen.Condition) IStockHotRankDo
	Or(conds ...gen.Condition) IStockHotRankDo
	Select(conds ...field.Expr) IStockHotRankDo
	Where(conds ...gen.Condition) IStockHotRankDo
	Order(conds ...field.Expr) IStockHotRankDo
	Distinct(cols ...field.Expr) IStockHotRankDo
	Omit(cols ...field.Expr) IStockHotRankDo
	Join(table schema.Tabler, on ...field.Expr) IStockHotRankDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStockHotRankDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStockHotRankDo
	Group(cols ...field.Expr) IStockHotRankDo
	Having(conds ...gen.Condition) IStockHotRankDo
	Limit(limit int) IStockHotRankDo
	Offset(offset int) IStockHotRankDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStockHotRankDo
	Unscoped() IStockHotRankDo
	Create(values ...*model.StockHotRank) error
	CreateInBatches(values []*model.StockHotRank, batchSize int) error
	Save(values ...*model.StockHotRank) error
	First() (*model.StockHotRank, error)
	Take() (*model.StockHotRank, error)
	Last() (*model.StockHotRank, error)
	Find() ([]*model.StockHotRank, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockHotRank, err error)
	FindInBatches(result *[]*model.StockHotRank, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StockHotRank) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStockHotRankDo
	Assign(attrs ...field.AssignExpr) IStockHotRankDo
	Joins(fields ...field.RelationField) IStockHotRankDo
	Preload(fields ...field.RelationField) IStockHotRankDo
	FirstOrInit() (*model.StockHotRank, error)
	FirstOrCreate() (*model.StockHotRank, error)
	FindByPage(offset int, limit int) (result []*model.StockHotRank, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStockHotRankDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stockHotRankDo) Debug() IStockHotRankDo {
	return s.withDO(s.DO.Debug())
}

func (s stockHotRankDo) WithContext(ctx context.Context) IStockHotRankDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stockHotRankDo) ReadDB() IStockHotRankDo {
	return s.Clauses(dbresolver.Read)
}

func (s stockHotRankDo) WriteDB() IStockHotRankDo {
	return s.Clauses(dbresolver.Write)
}

func (s stockHotRankDo) Session(config *gorm.Session) IStockHotRankDo {
	return s.withDO(s.DO.Session(config))
}

func (s stockHotRankDo) Clauses(conds ...clause.Expression) IStockHotRankDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stockHotRankDo) Returning(value interface{}, columns ...string) IStockHotRankDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stockHotRankDo) Not(conds ...gen.Condition) IStockHotRankDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stockHotRankDo) Or(conds ...gen.Condition) IStockHotRankDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stockHotRankDo) Select(conds ...field.Expr) IStockHotRankDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stockHotRankDo) Where(conds ...gen.Condition) IStockHotRankDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stockHotRankDo) Order(conds ...field.Expr) IStockHotRankDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stockHotRankDo) Distinct(cols ...field.Expr) IStockHotRankDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stockHotRankDo) Omit(cols ...field.Expr) IStockHotRankDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stockHotRankDo) Join(table schema.Tabler, on ...field.Expr) IStockHotRankDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stockHotRankDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStockHotRankDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stockHotRankDo) RightJoin(table schema.Tabler, on ...field.Expr) IStockHotRankDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stockHotRankDo) Group(cols ...field.Expr) IStockHotRankDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stockHotRankDo) Having(conds ...gen.Condition) IStockHotRankDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stockHotRankDo) Limit(limit int) IStockHotRankDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stockHotRankDo) Offset(offset int) IStockHotRankDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stockHotRankDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStockHotRankDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stockHotRankDo) Unscoped() IStockHotRankDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stockHotRankDo) Create(values ...*model.StockHotRank) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stockHotRankDo) CreateInBatches(values []*model.StockHotRank, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stockHotRankDo) Save(values ...*model.StockHotRank) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stockHotRankDo) First() (*model.StockHotRank, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockHotRank), nil
	}
}

func (s stockHotRankDo) Take() (*model.StockHotRank, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockHotRank), nil
	}
}

func (s stockHotRankDo) Last() (*model.StockHotRank, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockHotRank), nil
	}
}

func (s stockHotRankDo) Find() ([]*model.StockHotRank, error) {
	result, err := s.DO.Find()
	return result.([]*model.StockHotRank), err
}

func (s stockHotRankDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockHotRank, err error) {
	buf := make([]*model.StockHotRank, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stockHotRankDo) FindInBatches(result *[]*model.StockHotRank, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stockHotRankDo) Attrs(attrs ...field.AssignExpr) IStockHotRankDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stockHotRankDo) Assign(attrs ...field.AssignExpr) IStockHotRankDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stockHotRankDo) Joins(fields ...field.RelationField) IStockHotRankDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stockHotRankDo) Preload(fields ...field.RelationField) IStockHotRankDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stockHotRankDo) FirstOrInit() (*model.StockHotRank, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockHotRank), nil
	}
}

func (s stockHotRankDo) FirstOrCreate() (*model.StockHotRank, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockHotRank), nil
	}
}

func (s stockHotRankDo) FindByPage(offset int, limit int) (result []*model.StockHotRank, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stockHotRankDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stockHotRankDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stockHotRankDo) Delete(models ...*model.StockHotRank) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stockHotRankDo) withDO(do gen.Dao) *stockHotRankDo {
	s.DO = *do.(*gen.DO)
	return s
}
