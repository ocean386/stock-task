// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                  = new(Query)
	Stock              *stock
	StockConcept       *stockConcept
	StockConceptList   *stockConceptList
	StockDailyComment  *stockDailyComment
	StockDailyConcept  *stockDailyConcept
	StockDailyIndustry *stockDailyIndustry
	StockDailyMarket   *stockDailyMarket
	StockDate          *stockDate
	StockFundRank      *stockFundRank
	StockHotRank       *stockHotRank
	StockIndustry      *stockIndustry
	StockOrderChange   *stockOrderChange
	StockStrong        *stockStrong
	StockTigerLeader   *stockTigerLeader
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Stock = &Q.Stock
	StockConcept = &Q.StockConcept
	StockConceptList = &Q.StockConceptList
	StockDailyComment = &Q.StockDailyComment
	StockDailyConcept = &Q.StockDailyConcept
	StockDailyIndustry = &Q.StockDailyIndustry
	StockDailyMarket = &Q.StockDailyMarket
	StockDate = &Q.StockDate
	StockFundRank = &Q.StockFundRank
	StockHotRank = &Q.StockHotRank
	StockIndustry = &Q.StockIndustry
	StockOrderChange = &Q.StockOrderChange
	StockStrong = &Q.StockStrong
	StockTigerLeader = &Q.StockTigerLeader
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                 db,
		Stock:              newStock(db, opts...),
		StockConcept:       newStockConcept(db, opts...),
		StockConceptList:   newStockConceptList(db, opts...),
		StockDailyComment:  newStockDailyComment(db, opts...),
		StockDailyConcept:  newStockDailyConcept(db, opts...),
		StockDailyIndustry: newStockDailyIndustry(db, opts...),
		StockDailyMarket:   newStockDailyMarket(db, opts...),
		StockDate:          newStockDate(db, opts...),
		StockFundRank:      newStockFundRank(db, opts...),
		StockHotRank:       newStockHotRank(db, opts...),
		StockIndustry:      newStockIndustry(db, opts...),
		StockOrderChange:   newStockOrderChange(db, opts...),
		StockStrong:        newStockStrong(db, opts...),
		StockTigerLeader:   newStockTigerLeader(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Stock              stock
	StockConcept       stockConcept
	StockConceptList   stockConceptList
	StockDailyComment  stockDailyComment
	StockDailyConcept  stockDailyConcept
	StockDailyIndustry stockDailyIndustry
	StockDailyMarket   stockDailyMarket
	StockDate          stockDate
	StockFundRank      stockFundRank
	StockHotRank       stockHotRank
	StockIndustry      stockIndustry
	StockOrderChange   stockOrderChange
	StockStrong        stockStrong
	StockTigerLeader   stockTigerLeader
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		Stock:              q.Stock.clone(db),
		StockConcept:       q.StockConcept.clone(db),
		StockConceptList:   q.StockConceptList.clone(db),
		StockDailyComment:  q.StockDailyComment.clone(db),
		StockDailyConcept:  q.StockDailyConcept.clone(db),
		StockDailyIndustry: q.StockDailyIndustry.clone(db),
		StockDailyMarket:   q.StockDailyMarket.clone(db),
		StockDate:          q.StockDate.clone(db),
		StockFundRank:      q.StockFundRank.clone(db),
		StockHotRank:       q.StockHotRank.clone(db),
		StockIndustry:      q.StockIndustry.clone(db),
		StockOrderChange:   q.StockOrderChange.clone(db),
		StockStrong:        q.StockStrong.clone(db),
		StockTigerLeader:   q.StockTigerLeader.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		Stock:              q.Stock.replaceDB(db),
		StockConcept:       q.StockConcept.replaceDB(db),
		StockConceptList:   q.StockConceptList.replaceDB(db),
		StockDailyComment:  q.StockDailyComment.replaceDB(db),
		StockDailyConcept:  q.StockDailyConcept.replaceDB(db),
		StockDailyIndustry: q.StockDailyIndustry.replaceDB(db),
		StockDailyMarket:   q.StockDailyMarket.replaceDB(db),
		StockDate:          q.StockDate.replaceDB(db),
		StockFundRank:      q.StockFundRank.replaceDB(db),
		StockHotRank:       q.StockHotRank.replaceDB(db),
		StockIndustry:      q.StockIndustry.replaceDB(db),
		StockOrderChange:   q.StockOrderChange.replaceDB(db),
		StockStrong:        q.StockStrong.replaceDB(db),
		StockTigerLeader:   q.StockTigerLeader.replaceDB(db),
	}
}

type queryCtx struct {
	Stock              IStockDo
	StockConcept       IStockConceptDo
	StockConceptList   IStockConceptListDo
	StockDailyComment  IStockDailyCommentDo
	StockDailyConcept  IStockDailyConceptDo
	StockDailyIndustry IStockDailyIndustryDo
	StockDailyMarket   IStockDailyMarketDo
	StockDate          IStockDateDo
	StockFundRank      IStockFundRankDo
	StockHotRank       IStockHotRankDo
	StockIndustry      IStockIndustryDo
	StockOrderChange   IStockOrderChangeDo
	StockStrong        IStockStrongDo
	StockTigerLeader   IStockTigerLeaderDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Stock:              q.Stock.WithContext(ctx),
		StockConcept:       q.StockConcept.WithContext(ctx),
		StockConceptList:   q.StockConceptList.WithContext(ctx),
		StockDailyComment:  q.StockDailyComment.WithContext(ctx),
		StockDailyConcept:  q.StockDailyConcept.WithContext(ctx),
		StockDailyIndustry: q.StockDailyIndustry.WithContext(ctx),
		StockDailyMarket:   q.StockDailyMarket.WithContext(ctx),
		StockDate:          q.StockDate.WithContext(ctx),
		StockFundRank:      q.StockFundRank.WithContext(ctx),
		StockHotRank:       q.StockHotRank.WithContext(ctx),
		StockIndustry:      q.StockIndustry.WithContext(ctx),
		StockOrderChange:   q.StockOrderChange.WithContext(ctx),
		StockStrong:        q.StockStrong.WithContext(ctx),
		StockTigerLeader:   q.StockTigerLeader.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
