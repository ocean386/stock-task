// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	Stock            *stock
	StockDailyMarket *stockDailyMarket
	StockDate        *stockDate
	StockFundRank    *stockFundRank
	StockTigerLeader *stockTigerLeader
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Stock = &Q.Stock
	StockDailyMarket = &Q.StockDailyMarket
	StockDate = &Q.StockDate
	StockFundRank = &Q.StockFundRank
	StockTigerLeader = &Q.StockTigerLeader
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		Stock:            newStock(db, opts...),
		StockDailyMarket: newStockDailyMarket(db, opts...),
		StockDate:        newStockDate(db, opts...),
		StockFundRank:    newStockFundRank(db, opts...),
		StockTigerLeader: newStockTigerLeader(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Stock            stock
	StockDailyMarket stockDailyMarket
	StockDate        stockDate
	StockFundRank    stockFundRank
	StockTigerLeader stockTigerLeader
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Stock:            q.Stock.clone(db),
		StockDailyMarket: q.StockDailyMarket.clone(db),
		StockDate:        q.StockDate.clone(db),
		StockFundRank:    q.StockFundRank.clone(db),
		StockTigerLeader: q.StockTigerLeader.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Stock:            q.Stock.replaceDB(db),
		StockDailyMarket: q.StockDailyMarket.replaceDB(db),
		StockDate:        q.StockDate.replaceDB(db),
		StockFundRank:    q.StockFundRank.replaceDB(db),
		StockTigerLeader: q.StockTigerLeader.replaceDB(db),
	}
}

type queryCtx struct {
	Stock            IStockDo
	StockDailyMarket IStockDailyMarketDo
	StockDate        IStockDateDo
	StockFundRank    IStockFundRankDo
	StockTigerLeader IStockTigerLeaderDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Stock:            q.Stock.WithContext(ctx),
		StockDailyMarket: q.StockDailyMarket.WithContext(ctx),
		StockDate:        q.StockDate.WithContext(ctx),
		StockFundRank:    q.StockFundRank.WithContext(ctx),
		StockTigerLeader: q.StockTigerLeader.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
