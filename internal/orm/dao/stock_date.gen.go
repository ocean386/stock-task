// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/stock-task/internal/orm/model"
)

func newStockDate(db *gorm.DB, opts ...gen.DOOption) stockDate {
	_stockDate := stockDate{}

	_stockDate.stockDateDo.UseDB(db, opts...)
	_stockDate.stockDateDo.UseModel(&model.StockDate{})

	tableName := _stockDate.stockDateDo.TableName()
	_stockDate.ALL = field.NewAsterisk(tableName)
	_stockDate.ID = field.NewInt64(tableName, "id")
	_stockDate.StockDate = field.NewTime(tableName, "stock_date")

	_stockDate.fillFieldMap()

	return _stockDate
}

// stockDate 交易日期-A股
type stockDate struct {
	stockDateDo

	ALL       field.Asterisk
	ID        field.Int64 // 主键ID
	StockDate field.Time

	fieldMap map[string]field.Expr
}

func (s stockDate) Table(newTableName string) *stockDate {
	s.stockDateDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stockDate) As(alias string) *stockDate {
	s.stockDateDo.DO = *(s.stockDateDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stockDate) updateTableName(table string) *stockDate {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.StockDate = field.NewTime(table, "stock_date")

	s.fillFieldMap()

	return s
}

func (s *stockDate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stockDate) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["id"] = s.ID
	s.fieldMap["stock_date"] = s.StockDate
}

func (s stockDate) clone(db *gorm.DB) stockDate {
	s.stockDateDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stockDate) replaceDB(db *gorm.DB) stockDate {
	s.stockDateDo.ReplaceDB(db)
	return s
}

type stockDateDo struct{ gen.DO }

type IStockDateDo interface {
	gen.SubQuery
	Debug() IStockDateDo
	WithContext(ctx context.Context) IStockDateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStockDateDo
	WriteDB() IStockDateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStockDateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStockDateDo
	Not(conds ...gen.Condition) IStockDateDo
	Or(conds ...gen.Condition) IStockDateDo
	Select(conds ...field.Expr) IStockDateDo
	Where(conds ...gen.Condition) IStockDateDo
	Order(conds ...field.Expr) IStockDateDo
	Distinct(cols ...field.Expr) IStockDateDo
	Omit(cols ...field.Expr) IStockDateDo
	Join(table schema.Tabler, on ...field.Expr) IStockDateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStockDateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStockDateDo
	Group(cols ...field.Expr) IStockDateDo
	Having(conds ...gen.Condition) IStockDateDo
	Limit(limit int) IStockDateDo
	Offset(offset int) IStockDateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStockDateDo
	Unscoped() IStockDateDo
	Create(values ...*model.StockDate) error
	CreateInBatches(values []*model.StockDate, batchSize int) error
	Save(values ...*model.StockDate) error
	First() (*model.StockDate, error)
	Take() (*model.StockDate, error)
	Last() (*model.StockDate, error)
	Find() ([]*model.StockDate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockDate, err error)
	FindInBatches(result *[]*model.StockDate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StockDate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStockDateDo
	Assign(attrs ...field.AssignExpr) IStockDateDo
	Joins(fields ...field.RelationField) IStockDateDo
	Preload(fields ...field.RelationField) IStockDateDo
	FirstOrInit() (*model.StockDate, error)
	FirstOrCreate() (*model.StockDate, error)
	FindByPage(offset int, limit int) (result []*model.StockDate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStockDateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stockDateDo) Debug() IStockDateDo {
	return s.withDO(s.DO.Debug())
}

func (s stockDateDo) WithContext(ctx context.Context) IStockDateDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stockDateDo) ReadDB() IStockDateDo {
	return s.Clauses(dbresolver.Read)
}

func (s stockDateDo) WriteDB() IStockDateDo {
	return s.Clauses(dbresolver.Write)
}

func (s stockDateDo) Session(config *gorm.Session) IStockDateDo {
	return s.withDO(s.DO.Session(config))
}

func (s stockDateDo) Clauses(conds ...clause.Expression) IStockDateDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stockDateDo) Returning(value interface{}, columns ...string) IStockDateDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stockDateDo) Not(conds ...gen.Condition) IStockDateDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stockDateDo) Or(conds ...gen.Condition) IStockDateDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stockDateDo) Select(conds ...field.Expr) IStockDateDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stockDateDo) Where(conds ...gen.Condition) IStockDateDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stockDateDo) Order(conds ...field.Expr) IStockDateDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stockDateDo) Distinct(cols ...field.Expr) IStockDateDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stockDateDo) Omit(cols ...field.Expr) IStockDateDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stockDateDo) Join(table schema.Tabler, on ...field.Expr) IStockDateDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stockDateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStockDateDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stockDateDo) RightJoin(table schema.Tabler, on ...field.Expr) IStockDateDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stockDateDo) Group(cols ...field.Expr) IStockDateDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stockDateDo) Having(conds ...gen.Condition) IStockDateDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stockDateDo) Limit(limit int) IStockDateDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stockDateDo) Offset(offset int) IStockDateDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stockDateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStockDateDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stockDateDo) Unscoped() IStockDateDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stockDateDo) Create(values ...*model.StockDate) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stockDateDo) CreateInBatches(values []*model.StockDate, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stockDateDo) Save(values ...*model.StockDate) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stockDateDo) First() (*model.StockDate, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockDate), nil
	}
}

func (s stockDateDo) Take() (*model.StockDate, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockDate), nil
	}
}

func (s stockDateDo) Last() (*model.StockDate, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockDate), nil
	}
}

func (s stockDateDo) Find() ([]*model.StockDate, error) {
	result, err := s.DO.Find()
	return result.([]*model.StockDate), err
}

func (s stockDateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockDate, err error) {
	buf := make([]*model.StockDate, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stockDateDo) FindInBatches(result *[]*model.StockDate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stockDateDo) Attrs(attrs ...field.AssignExpr) IStockDateDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stockDateDo) Assign(attrs ...field.AssignExpr) IStockDateDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stockDateDo) Joins(fields ...field.RelationField) IStockDateDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stockDateDo) Preload(fields ...field.RelationField) IStockDateDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stockDateDo) FirstOrInit() (*model.StockDate, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockDate), nil
	}
}

func (s stockDateDo) FirstOrCreate() (*model.StockDate, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockDate), nil
	}
}

func (s stockDateDo) FindByPage(offset int, limit int) (result []*model.StockDate, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stockDateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stockDateDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stockDateDo) Delete(models ...*model.StockDate) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stockDateDo) withDO(do gen.Dao) *stockDateDo {
	s.DO = *do.(*gen.DO)
	return s
}
