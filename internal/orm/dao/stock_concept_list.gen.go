// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/stock-task/internal/orm/model"
)

func newStockConceptList(db *gorm.DB, opts ...gen.DOOption) stockConceptList {
	_stockConceptList := stockConceptList{}

	_stockConceptList.stockConceptListDo.UseDB(db, opts...)
	_stockConceptList.stockConceptListDo.UseModel(&model.StockConceptList{})

	tableName := _stockConceptList.stockConceptListDo.TableName()
	_stockConceptList.ALL = field.NewAsterisk(tableName)
	_stockConceptList.ConceptCode = field.NewString(tableName, "concept_code")
	_stockConceptList.ConceptName = field.NewString(tableName, "concept_name")
	_stockConceptList.StockCode = field.NewString(tableName, "stock_code")
	_stockConceptList.StockName = field.NewString(tableName, "stock_name")
	_stockConceptList.CreatedAt = field.NewTime(tableName, "created_at")
	_stockConceptList.UpdatedAt = field.NewTime(tableName, "updated_at")

	_stockConceptList.fillFieldMap()

	return _stockConceptList
}

// stockConceptList 概念成份股列表-A股
type stockConceptList struct {
	stockConceptListDo

	ALL         field.Asterisk
	ConceptCode field.String // 概念代码
	ConceptName field.String // 概念名称
	StockCode   field.String // 股票代码
	StockName   field.String // 股票名称
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s stockConceptList) Table(newTableName string) *stockConceptList {
	s.stockConceptListDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stockConceptList) As(alias string) *stockConceptList {
	s.stockConceptListDo.DO = *(s.stockConceptListDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stockConceptList) updateTableName(table string) *stockConceptList {
	s.ALL = field.NewAsterisk(table)
	s.ConceptCode = field.NewString(table, "concept_code")
	s.ConceptName = field.NewString(table, "concept_name")
	s.StockCode = field.NewString(table, "stock_code")
	s.StockName = field.NewString(table, "stock_name")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *stockConceptList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stockConceptList) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["concept_code"] = s.ConceptCode
	s.fieldMap["concept_name"] = s.ConceptName
	s.fieldMap["stock_code"] = s.StockCode
	s.fieldMap["stock_name"] = s.StockName
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s stockConceptList) clone(db *gorm.DB) stockConceptList {
	s.stockConceptListDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stockConceptList) replaceDB(db *gorm.DB) stockConceptList {
	s.stockConceptListDo.ReplaceDB(db)
	return s
}

type stockConceptListDo struct{ gen.DO }

type IStockConceptListDo interface {
	gen.SubQuery
	Debug() IStockConceptListDo
	WithContext(ctx context.Context) IStockConceptListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStockConceptListDo
	WriteDB() IStockConceptListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStockConceptListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStockConceptListDo
	Not(conds ...gen.Condition) IStockConceptListDo
	Or(conds ...gen.Condition) IStockConceptListDo
	Select(conds ...field.Expr) IStockConceptListDo
	Where(conds ...gen.Condition) IStockConceptListDo
	Order(conds ...field.Expr) IStockConceptListDo
	Distinct(cols ...field.Expr) IStockConceptListDo
	Omit(cols ...field.Expr) IStockConceptListDo
	Join(table schema.Tabler, on ...field.Expr) IStockConceptListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStockConceptListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStockConceptListDo
	Group(cols ...field.Expr) IStockConceptListDo
	Having(conds ...gen.Condition) IStockConceptListDo
	Limit(limit int) IStockConceptListDo
	Offset(offset int) IStockConceptListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStockConceptListDo
	Unscoped() IStockConceptListDo
	Create(values ...*model.StockConceptList) error
	CreateInBatches(values []*model.StockConceptList, batchSize int) error
	Save(values ...*model.StockConceptList) error
	First() (*model.StockConceptList, error)
	Take() (*model.StockConceptList, error)
	Last() (*model.StockConceptList, error)
	Find() ([]*model.StockConceptList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockConceptList, err error)
	FindInBatches(result *[]*model.StockConceptList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StockConceptList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStockConceptListDo
	Assign(attrs ...field.AssignExpr) IStockConceptListDo
	Joins(fields ...field.RelationField) IStockConceptListDo
	Preload(fields ...field.RelationField) IStockConceptListDo
	FirstOrInit() (*model.StockConceptList, error)
	FirstOrCreate() (*model.StockConceptList, error)
	FindByPage(offset int, limit int) (result []*model.StockConceptList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStockConceptListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stockConceptListDo) Debug() IStockConceptListDo {
	return s.withDO(s.DO.Debug())
}

func (s stockConceptListDo) WithContext(ctx context.Context) IStockConceptListDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stockConceptListDo) ReadDB() IStockConceptListDo {
	return s.Clauses(dbresolver.Read)
}

func (s stockConceptListDo) WriteDB() IStockConceptListDo {
	return s.Clauses(dbresolver.Write)
}

func (s stockConceptListDo) Session(config *gorm.Session) IStockConceptListDo {
	return s.withDO(s.DO.Session(config))
}

func (s stockConceptListDo) Clauses(conds ...clause.Expression) IStockConceptListDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stockConceptListDo) Returning(value interface{}, columns ...string) IStockConceptListDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stockConceptListDo) Not(conds ...gen.Condition) IStockConceptListDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stockConceptListDo) Or(conds ...gen.Condition) IStockConceptListDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stockConceptListDo) Select(conds ...field.Expr) IStockConceptListDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stockConceptListDo) Where(conds ...gen.Condition) IStockConceptListDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stockConceptListDo) Order(conds ...field.Expr) IStockConceptListDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stockConceptListDo) Distinct(cols ...field.Expr) IStockConceptListDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stockConceptListDo) Omit(cols ...field.Expr) IStockConceptListDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stockConceptListDo) Join(table schema.Tabler, on ...field.Expr) IStockConceptListDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stockConceptListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStockConceptListDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stockConceptListDo) RightJoin(table schema.Tabler, on ...field.Expr) IStockConceptListDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stockConceptListDo) Group(cols ...field.Expr) IStockConceptListDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stockConceptListDo) Having(conds ...gen.Condition) IStockConceptListDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stockConceptListDo) Limit(limit int) IStockConceptListDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stockConceptListDo) Offset(offset int) IStockConceptListDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stockConceptListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStockConceptListDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stockConceptListDo) Unscoped() IStockConceptListDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stockConceptListDo) Create(values ...*model.StockConceptList) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stockConceptListDo) CreateInBatches(values []*model.StockConceptList, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stockConceptListDo) Save(values ...*model.StockConceptList) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stockConceptListDo) First() (*model.StockConceptList, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockConceptList), nil
	}
}

func (s stockConceptListDo) Take() (*model.StockConceptList, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockConceptList), nil
	}
}

func (s stockConceptListDo) Last() (*model.StockConceptList, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockConceptList), nil
	}
}

func (s stockConceptListDo) Find() ([]*model.StockConceptList, error) {
	result, err := s.DO.Find()
	return result.([]*model.StockConceptList), err
}

func (s stockConceptListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockConceptList, err error) {
	buf := make([]*model.StockConceptList, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stockConceptListDo) FindInBatches(result *[]*model.StockConceptList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stockConceptListDo) Attrs(attrs ...field.AssignExpr) IStockConceptListDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stockConceptListDo) Assign(attrs ...field.AssignExpr) IStockConceptListDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stockConceptListDo) Joins(fields ...field.RelationField) IStockConceptListDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stockConceptListDo) Preload(fields ...field.RelationField) IStockConceptListDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stockConceptListDo) FirstOrInit() (*model.StockConceptList, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockConceptList), nil
	}
}

func (s stockConceptListDo) FirstOrCreate() (*model.StockConceptList, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockConceptList), nil
	}
}

func (s stockConceptListDo) FindByPage(offset int, limit int) (result []*model.StockConceptList, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stockConceptListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stockConceptListDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stockConceptListDo) Delete(models ...*model.StockConceptList) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stockConceptListDo) withDO(do gen.Dao) *stockConceptListDo {
	s.DO = *do.(*gen.DO)
	return s
}
