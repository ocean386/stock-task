// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/stock-task/internal/orm/model"
)

func newStockDailyComment(db *gorm.DB, opts ...gen.DOOption) stockDailyComment {
	_stockDailyComment := stockDailyComment{}

	_stockDailyComment.stockDailyCommentDo.UseDB(db, opts...)
	_stockDailyComment.stockDailyCommentDo.UseModel(&model.StockDailyComment{})

	tableName := _stockDailyComment.stockDailyCommentDo.TableName()
	_stockDailyComment.ALL = field.NewAsterisk(tableName)
	_stockDailyComment.StockCode = field.NewString(tableName, "stock_code")
	_stockDailyComment.StockName = field.NewString(tableName, "stock_name")
	_stockDailyComment.PlateType = field.NewInt64(tableName, "plate_type")
	_stockDailyComment.VolumeRatio = field.NewFloat64(tableName, "volume_ratio")
	_stockDailyComment.TurnoverRate = field.NewFloat64(tableName, "turnover_rate")
	_stockDailyComment.IncreaseRate = field.NewFloat64(tableName, "increase_rate")
	_stockDailyComment.CurrentPrice = field.NewFloat64(tableName, "current_price")
	_stockDailyComment.PrimeCost = field.NewFloat64(tableName, "prime_cost")
	_stockDailyComment.PrimeCost20 = field.NewFloat64(tableName, "prime_cost20")
	_stockDailyComment.PrimeCost60 = field.NewFloat64(tableName, "prime_cost60")
	_stockDailyComment.OrgParticipate = field.NewFloat64(tableName, "org_participate")
	_stockDailyComment.Score = field.NewFloat64(tableName, "score")
	_stockDailyComment.Rank = field.NewInt64(tableName, "rank")
	_stockDailyComment.Focus = field.NewFloat64(tableName, "focus")
	_stockDailyComment.TradingDate = field.NewTime(tableName, "trading_date")
	_stockDailyComment.UpdatedAt = field.NewTime(tableName, "updated_at")

	_stockDailyComment.fillFieldMap()

	return _stockDailyComment
}

// stockDailyComment 每日股评列表-A股
type stockDailyComment struct {
	stockDailyCommentDo

	ALL            field.Asterisk
	StockCode      field.String  // 股票代码
	StockName      field.String  // 股票名称
	PlateType      field.Int64   // 盘股类型(0-全部,1-微小盘,2-小盘,3-中盘,4-大盘)
	VolumeRatio    field.Float64 // 量比
	TurnoverRate   field.Float64 // 换手
	IncreaseRate   field.Float64 // 涨幅
	CurrentPrice   field.Float64 // 现价
	PrimeCost      field.Float64 // 主力成本
	PrimeCost20    field.Float64 // 主力成本-20日
	PrimeCost60    field.Float64 // 主力成本-60日
	OrgParticipate field.Float64 // 机构参与度
	Score          field.Float64 // 综合得分
	Rank           field.Int64   // 综合得分排名
	Focus          field.Float64 // 关注指数
	TradingDate    field.Time    // 交易日期
	UpdatedAt      field.Time    // 更新时间

	fieldMap map[string]field.Expr
}

func (s stockDailyComment) Table(newTableName string) *stockDailyComment {
	s.stockDailyCommentDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stockDailyComment) As(alias string) *stockDailyComment {
	s.stockDailyCommentDo.DO = *(s.stockDailyCommentDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stockDailyComment) updateTableName(table string) *stockDailyComment {
	s.ALL = field.NewAsterisk(table)
	s.StockCode = field.NewString(table, "stock_code")
	s.StockName = field.NewString(table, "stock_name")
	s.PlateType = field.NewInt64(table, "plate_type")
	s.VolumeRatio = field.NewFloat64(table, "volume_ratio")
	s.TurnoverRate = field.NewFloat64(table, "turnover_rate")
	s.IncreaseRate = field.NewFloat64(table, "increase_rate")
	s.CurrentPrice = field.NewFloat64(table, "current_price")
	s.PrimeCost = field.NewFloat64(table, "prime_cost")
	s.PrimeCost20 = field.NewFloat64(table, "prime_cost20")
	s.PrimeCost60 = field.NewFloat64(table, "prime_cost60")
	s.OrgParticipate = field.NewFloat64(table, "org_participate")
	s.Score = field.NewFloat64(table, "score")
	s.Rank = field.NewInt64(table, "rank")
	s.Focus = field.NewFloat64(table, "focus")
	s.TradingDate = field.NewTime(table, "trading_date")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *stockDailyComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stockDailyComment) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["stock_code"] = s.StockCode
	s.fieldMap["stock_name"] = s.StockName
	s.fieldMap["plate_type"] = s.PlateType
	s.fieldMap["volume_ratio"] = s.VolumeRatio
	s.fieldMap["turnover_rate"] = s.TurnoverRate
	s.fieldMap["increase_rate"] = s.IncreaseRate
	s.fieldMap["current_price"] = s.CurrentPrice
	s.fieldMap["prime_cost"] = s.PrimeCost
	s.fieldMap["prime_cost20"] = s.PrimeCost20
	s.fieldMap["prime_cost60"] = s.PrimeCost60
	s.fieldMap["org_participate"] = s.OrgParticipate
	s.fieldMap["score"] = s.Score
	s.fieldMap["rank"] = s.Rank
	s.fieldMap["focus"] = s.Focus
	s.fieldMap["trading_date"] = s.TradingDate
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s stockDailyComment) clone(db *gorm.DB) stockDailyComment {
	s.stockDailyCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stockDailyComment) replaceDB(db *gorm.DB) stockDailyComment {
	s.stockDailyCommentDo.ReplaceDB(db)
	return s
}

type stockDailyCommentDo struct{ gen.DO }

type IStockDailyCommentDo interface {
	gen.SubQuery
	Debug() IStockDailyCommentDo
	WithContext(ctx context.Context) IStockDailyCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStockDailyCommentDo
	WriteDB() IStockDailyCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStockDailyCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStockDailyCommentDo
	Not(conds ...gen.Condition) IStockDailyCommentDo
	Or(conds ...gen.Condition) IStockDailyCommentDo
	Select(conds ...field.Expr) IStockDailyCommentDo
	Where(conds ...gen.Condition) IStockDailyCommentDo
	Order(conds ...field.Expr) IStockDailyCommentDo
	Distinct(cols ...field.Expr) IStockDailyCommentDo
	Omit(cols ...field.Expr) IStockDailyCommentDo
	Join(table schema.Tabler, on ...field.Expr) IStockDailyCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStockDailyCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStockDailyCommentDo
	Group(cols ...field.Expr) IStockDailyCommentDo
	Having(conds ...gen.Condition) IStockDailyCommentDo
	Limit(limit int) IStockDailyCommentDo
	Offset(offset int) IStockDailyCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStockDailyCommentDo
	Unscoped() IStockDailyCommentDo
	Create(values ...*model.StockDailyComment) error
	CreateInBatches(values []*model.StockDailyComment, batchSize int) error
	Save(values ...*model.StockDailyComment) error
	First() (*model.StockDailyComment, error)
	Take() (*model.StockDailyComment, error)
	Last() (*model.StockDailyComment, error)
	Find() ([]*model.StockDailyComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockDailyComment, err error)
	FindInBatches(result *[]*model.StockDailyComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StockDailyComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStockDailyCommentDo
	Assign(attrs ...field.AssignExpr) IStockDailyCommentDo
	Joins(fields ...field.RelationField) IStockDailyCommentDo
	Preload(fields ...field.RelationField) IStockDailyCommentDo
	FirstOrInit() (*model.StockDailyComment, error)
	FirstOrCreate() (*model.StockDailyComment, error)
	FindByPage(offset int, limit int) (result []*model.StockDailyComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStockDailyCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stockDailyCommentDo) Debug() IStockDailyCommentDo {
	return s.withDO(s.DO.Debug())
}

func (s stockDailyCommentDo) WithContext(ctx context.Context) IStockDailyCommentDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stockDailyCommentDo) ReadDB() IStockDailyCommentDo {
	return s.Clauses(dbresolver.Read)
}

func (s stockDailyCommentDo) WriteDB() IStockDailyCommentDo {
	return s.Clauses(dbresolver.Write)
}

func (s stockDailyCommentDo) Session(config *gorm.Session) IStockDailyCommentDo {
	return s.withDO(s.DO.Session(config))
}

func (s stockDailyCommentDo) Clauses(conds ...clause.Expression) IStockDailyCommentDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stockDailyCommentDo) Returning(value interface{}, columns ...string) IStockDailyCommentDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stockDailyCommentDo) Not(conds ...gen.Condition) IStockDailyCommentDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stockDailyCommentDo) Or(conds ...gen.Condition) IStockDailyCommentDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stockDailyCommentDo) Select(conds ...field.Expr) IStockDailyCommentDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stockDailyCommentDo) Where(conds ...gen.Condition) IStockDailyCommentDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stockDailyCommentDo) Order(conds ...field.Expr) IStockDailyCommentDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stockDailyCommentDo) Distinct(cols ...field.Expr) IStockDailyCommentDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stockDailyCommentDo) Omit(cols ...field.Expr) IStockDailyCommentDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stockDailyCommentDo) Join(table schema.Tabler, on ...field.Expr) IStockDailyCommentDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stockDailyCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStockDailyCommentDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stockDailyCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) IStockDailyCommentDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stockDailyCommentDo) Group(cols ...field.Expr) IStockDailyCommentDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stockDailyCommentDo) Having(conds ...gen.Condition) IStockDailyCommentDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stockDailyCommentDo) Limit(limit int) IStockDailyCommentDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stockDailyCommentDo) Offset(offset int) IStockDailyCommentDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stockDailyCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStockDailyCommentDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stockDailyCommentDo) Unscoped() IStockDailyCommentDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stockDailyCommentDo) Create(values ...*model.StockDailyComment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stockDailyCommentDo) CreateInBatches(values []*model.StockDailyComment, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stockDailyCommentDo) Save(values ...*model.StockDailyComment) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stockDailyCommentDo) First() (*model.StockDailyComment, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockDailyComment), nil
	}
}

func (s stockDailyCommentDo) Take() (*model.StockDailyComment, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockDailyComment), nil
	}
}

func (s stockDailyCommentDo) Last() (*model.StockDailyComment, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockDailyComment), nil
	}
}

func (s stockDailyCommentDo) Find() ([]*model.StockDailyComment, error) {
	result, err := s.DO.Find()
	return result.([]*model.StockDailyComment), err
}

func (s stockDailyCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StockDailyComment, err error) {
	buf := make([]*model.StockDailyComment, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stockDailyCommentDo) FindInBatches(result *[]*model.StockDailyComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stockDailyCommentDo) Attrs(attrs ...field.AssignExpr) IStockDailyCommentDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stockDailyCommentDo) Assign(attrs ...field.AssignExpr) IStockDailyCommentDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stockDailyCommentDo) Joins(fields ...field.RelationField) IStockDailyCommentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stockDailyCommentDo) Preload(fields ...field.RelationField) IStockDailyCommentDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stockDailyCommentDo) FirstOrInit() (*model.StockDailyComment, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockDailyComment), nil
	}
}

func (s stockDailyCommentDo) FirstOrCreate() (*model.StockDailyComment, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StockDailyComment), nil
	}
}

func (s stockDailyCommentDo) FindByPage(offset int, limit int) (result []*model.StockDailyComment, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stockDailyCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stockDailyCommentDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stockDailyCommentDo) Delete(models ...*model.StockDailyComment) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stockDailyCommentDo) withDO(do gen.Dao) *stockDailyCommentDo {
	s.DO = *do.(*gen.DO)
	return s
}
